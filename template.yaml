AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  brandonsaws

  Sample SAM Template for brandonsaws

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:

  MyWebsite:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: brandonsaws.com

  MyWebsitePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyWebsite
      PolicyDocument:
        Id: MyPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref MyWebsite, '/*']]
  
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloud-resume-challenge
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"

  MyRoute53Record:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: Z0510070396OWR97W4BVB
      RecordSets:
        - Name: brandonsaws.com
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt MyDistribution.DomainName 

  MyCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: brandonsaws.com
      ValidationMethod: DNS          

  MyDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:793438886230:certificate/8201eebb-88e3-4031-8ce6-4ef3f249b62d
          SslSupportMethod: sni-only
        Aliases:
          - brandonsaws.com  
        DefaultCacheBehavior:
          ViewerProtocolPolicy: allow-all
          TargetOriginId: brandonsaws.com.s3-website.us-east-2.amazonaws.com
          MinTTL: 0
          MaxTTL: 0
          DefaultTTL: 0
          ForwardedValues:
            QueryString: false
        Origins:
          - DomainName: brandonsaws.com.s3-website.us-east-2.amazonaws.com
            Id: brandonsaws.com.s3-website.us-east-2.amazonaws.com
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        Enabled: "true"
        DefaultRootObject: index.html   

  MyGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getFunction/
      Handler: app.getFunction
      Runtime: nodejs20.x
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /get
            Method: GET

      MemorySize: 128
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: cloud-resume-challenge
        - AWSLambdaBasicExecutionRole
    

  MyGetApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "MyGetApi"
          version: "1.0"
        paths:
          /get:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyGetFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
      # Add CORS configuration here
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowOrigin: "'*'"
        # Optionally, you can specify AllowCredentials and MaxAge
        AllowCredentials: "'false'"
        MaxAge: "'600'"


  MyPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: putFunction/
      Handler: app.putFunction
      Runtime: nodejs20.x
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /put
            Method: PUT
      MemorySize: 128
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: cloud-resume-challenge


  MyPutApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "MyPutApi"
          version: "1.0"
        paths:
          /put:
            put:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyPutFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                  statusCode: "200"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'PUT'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
      # Add CORS configuration here
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'PUT,OPTIONS,GET'"
        AllowOrigin: "'*'"




  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  
  MyGetFunctionArn:
    Description: ARN of the MyGetFunction Lambda function
    Value: !GetAtt MyGetFunction.Arn

  MyGetApiEndpoint:
    Description: Endpoint URL of the MyGetApi API Gateway
    Value: !Sub "https://${MyGetApi}.execute-api.${AWS::Region}.amazonaws.com/prod/get"

  MyPutFunctionArn:
    Description: ARN of the MyPutFunction Lambda function
    Value: !GetAtt MyPutFunction.Arn

  MyPutApiEndpoint:
    Description: Endpoint URL of the MyPutApi API Gateway
    Value: !Sub "https://${MyPutApi}.execute-api.${AWS::Region}.amazonaws.com/prod/put"
